//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

<<<<<<< HEAD:Quantum/GroverSearch/obj/qsharp/src/Program.g.EntryPoint.cs
namespace GroversTutorial
{
    internal class __QsEntryPoint__FactorizeWithGrovers : global::Microsoft.Quantum.EntryPointDriver.IEntryPoint
    {
        public string Name => "GroversTutorial.FactorizeWithGrovers";
        public string Summary => "";
        public System.Collections.Generic.IEnumerable<System.CommandLine.Option> Options => new System.CommandLine.Option[] { global::Microsoft.Quantum.EntryPointDriver.Options.CreateOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("number"), "") };
        private static Int64 CreateArgument(System.CommandLine.Parsing.ParseResult parseResult) => parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("number"));
        public System.Threading.Tasks.Task<int> GenerateAzurePayload(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.GenerateAzurePayloadSettings settings) => global::Microsoft.Quantum.EntryPointDriver.Azure.GenerateAzurePayload(settings, global::System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("__qsharp_data_qir_v1__.bc") is { } qirStream ? new global::Microsoft.Quantum.EntryPointDriver.QirSubmission(qirStream, "GroversTutorial.FactorizeWithGrovers", global::System.Collections.Immutable.ImmutableList.Create<global::Microsoft.Quantum.Runtime.Argument>(new global::Microsoft.Quantum.Runtime.Argument("number", new global::Microsoft.Quantum.Runtime.ArgumentValue.Int(parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("number")))))) : null);
        public System.Threading.Tasks.Task<int> Submit(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.AzureSettings settings) => global::Microsoft.Quantum.EntryPointDriver.Azure.Submit(settings, new global::Microsoft.Quantum.EntryPointDriver.QSharpSubmission<Int64, QVoid>(global::GroversTutorial.FactorizeWithGrovers.Info, CreateArgument(parseResult)), global::System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("__qsharp_data_qir_v1__.bc") is { } qirStream ? new global::Microsoft.Quantum.EntryPointDriver.QirSubmission(qirStream, "GroversTutorial.FactorizeWithGrovers", global::System.Collections.Immutable.ImmutableList.Create<global::Microsoft.Quantum.Runtime.Argument>(new global::Microsoft.Quantum.Runtime.Argument("number", new global::Microsoft.Quantum.Runtime.ArgumentValue.Int(parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("number")))))) : null);
        public System.Threading.Tasks.Task<int> Simulate(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.DriverSettings settings, string simulator) => global::Microsoft.Quantum.EntryPointDriver.Simulation<global::GroversTutorial.FactorizeWithGrovers, Int64, QVoid>.Simulate(this, CreateArgument(parseResult), settings, simulator);
=======
namespace Teleport
{
    internal class __QsEntryPoint__RunProgram : global::Microsoft.Quantum.EntryPointDriver.IEntryPoint
    {
        public string Name => "Teleport.RunProgram";
        public string Summary => "";
        public System.Collections.Generic.IEnumerable<System.CommandLine.Option> Options => new System.CommandLine.Option[] { };
        private static QVoid CreateArgument(System.CommandLine.Parsing.ParseResult parseResult) => QVoid.Instance;
        public System.Threading.Tasks.Task<int> GenerateAzurePayload(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.GenerateAzurePayloadSettings settings) => global::Microsoft.Quantum.EntryPointDriver.Azure.GenerateAzurePayload(settings, global::System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("__qsharp_data_qir_v1__.bc") is { } qirStream ? new global::Microsoft.Quantum.EntryPointDriver.QirSubmission(qirStream, "Teleport.RunProgram", global::System.Collections.Immutable.ImmutableList.Create<global::Microsoft.Quantum.Runtime.Argument>()) : null);
        public System.Threading.Tasks.Task<int> Submit(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.AzureSettings settings) => global::Microsoft.Quantum.EntryPointDriver.Azure.Submit(settings, new global::Microsoft.Quantum.EntryPointDriver.QSharpSubmission<QVoid, QVoid>(global::Teleport.RunProgram.Info, CreateArgument(parseResult)), global::System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("__qsharp_data_qir_v1__.bc") is { } qirStream ? new global::Microsoft.Quantum.EntryPointDriver.QirSubmission(qirStream, "Teleport.RunProgram", global::System.Collections.Immutable.ImmutableList.Create<global::Microsoft.Quantum.Runtime.Argument>()) : null);
        public System.Threading.Tasks.Task<int> Simulate(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.DriverSettings settings, string simulator) => global::Microsoft.Quantum.EntryPointDriver.Simulation<global::Teleport.RunProgram, QVoid, QVoid>.Simulate(this, CreateArgument(parseResult), settings, simulator);
>>>>>>> 5b8055a6846f3c609963dace69dc0f4834774b90:Quantum/Teleport/obj/qsharp/src/Program.g.EntryPoint.cs
    }
}