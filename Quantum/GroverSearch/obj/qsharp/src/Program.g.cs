//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"FactorizeWithGrovers\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":10,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"number\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"FactorizeWithGrovers\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"MarkDivisor\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"dividend\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"divisorRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"MarkDivisor\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"MarkDivisor\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GroversTutorial.MarkDivisor\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"MarkDivisor\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlled specialization for GroversTutorial.MarkDivisor\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"MarkDivisor\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":45,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for GroversTutorial.MarkDivisor\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markingOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":17}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":17},\"Item2\":{\"Line\":4,\"Column\":20}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GroversTutorial.ApplyMarkingOracleAsPhaseOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":82,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"phaseOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":100}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":82,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"ReflectAboutUniform\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":90,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inputQubits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":42}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GroversTutorial\",\"Name\":\"ReflectAboutUniform\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Doops\\\\Desktop\\\\CSE 310\\\\Portfolio\\\\Quantum\\\\GroverSearch\\\\Program.qs\",\"Position\":{\"Item1\":90,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
#line hidden
namespace GroversTutorial
{
    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Body, 12, 46)]
    public partial class FactorizeWithGrovers : Operation<Int64, QVoid>, ICallable
    {
        public FactorizeWithGrovers(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "FactorizeWithGrovers";
        String ICallable.FullName => "GroversTutorial.FactorizeWithGrovers";
        public static EntryPointInfo<Int64, QVoid> Info => new EntryPointInfo<Int64, QVoid>(typeof(FactorizeWithGrovers));
        protected IUnitary<(Int64,IQArray<Qubit>,Qubit)> MarkDivisor__
        {
            get;
            set;
        }

        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> ApplyMarkingOracleAsPhaseOracle__
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> Microsoft__Quantum__Math__BitSizeI
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid> RunGroversSearch__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> Microsoft__Quantum__Convert__BoolArrayAsInt
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> Microsoft__Quantum__Convert__ResultArrayAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var number = __in__;
#line 15 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var markingOracle = MarkDivisor__.Partial(new Func<(IQArray<Qubit>,Qubit), (Int64,IQArray<Qubit>,Qubit)>((__arg1__) => (number, __arg1__.Item1, __arg1__.Item2)));
#line 16 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var phaseOracle = ApplyMarkingOracleAsPhaseOracle__.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg2__) => (markingOracle, __arg2__)));
#line 18 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var size = Microsoft__Quantum__Math__BitSizeI.Apply(number);
#line 20 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var nSolutions = 4L;
#line 22 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var nIterations = Microsoft__Quantum__Math__Round.Apply(((Microsoft__Quantum__Math__PI.Apply(QVoid.Instance) / 4D) * Microsoft__Quantum__Math__Sqrt.Apply((Microsoft__Quantum__Convert__IntAsDouble.Apply(size) / Microsoft__Quantum__Convert__IntAsDouble.Apply(nSolutions)))));
#line hidden
            {
#line 25 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var (register,output) = (Allocate__.Apply(size), Allocate__.Apply());
#line hidden
                bool __arg3__ = true;
                try
                {
#line 26 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var isCorrect = false;
#line 27 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var answer = 0L;
#line 29 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    while (true)
                    {
#line 30 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                        RunGroversSearch__.Apply((register, phaseOracle, nIterations));
#line 31 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                        var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(register);
#line 32 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                        answer = Microsoft__Quantum__Convert__BoolArrayAsInt.Apply(Microsoft__Quantum__Convert__ResultArrayAsBoolArray.Apply(res));
#line 34 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                        markingOracle.Apply((register, output));
#line 35 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                        if ((((Microsoft__Quantum__Measurement__MResetZ.Apply(output) == Result.One) && (answer != 1L)) && (answer != number)))
                        {
#line 36 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                            isCorrect = true;
                        }

#line 38 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                        ResetAll__.Apply(register);
                        if (isCorrect)
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 42 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Message__.Apply(String.Format("The number {0} is a factor of {1}.", answer, number));
                }
#line hidden
                catch
                {
                    __arg3__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg3__)
                    {
#line hidden
                        Release__.Apply(register);
#line hidden
                        Release__.Apply(output);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.MarkDivisor__ = this.__Factory__.Get<IUnitary<(Int64,IQArray<Qubit>,Qubit)>>(typeof(MarkDivisor));
            this.ApplyMarkingOracleAsPhaseOracle__ = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(ApplyMarkingOracleAsPhaseOracle));
            this.Microsoft__Quantum__Math__BitSizeI = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.BitSizeI));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.RunGroversSearch__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid>>(typeof(RunGroversSearch));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
            this.Microsoft__Quantum__Convert__BoolArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(global::Microsoft.Quantum.Convert.BoolArrayAsInt));
            this.Microsoft__Quantum__Convert__ResultArrayAsBoolArray = this.__Factory__.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 number)
        {
            return __m__.Run<FactorizeWithGrovers, Int64, QVoid>(number);
        }
    }

    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Body, 46, 70)]
    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Adjoint, 46, 70)]
    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Controlled, 46, 70)]
    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.ControlledAdjoint, 46, 70)]
    public partial class MarkDivisor : Unitary<(Int64,IQArray<Qubit>,Qubit)>, ICallable
    {
        public MarkDivisor(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MarkDivisor";
        String ICallable.FullName => "GroversTutorial.MarkDivisor";
        protected ICallable<Int64, Int64> Microsoft__Quantum__Math__BitSizeI
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__ApplyXorInPlace
        {
            get;
            set;
        }

        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (dividend,divisorRegister,target) = __in__;
#line 51 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var size = Microsoft__Quantum__Math__BitSizeI.Apply(dividend);
#line hidden
            {
#line 52 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var (dividendQubits,resultQubits) = (Allocate__.Apply(size), Allocate__.Apply(size));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 53 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var xs = new Microsoft.Quantum.Arithmetic.LittleEndian(dividendQubits);
#line 54 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var ys = new Microsoft.Quantum.Arithmetic.LittleEndian(divisorRegister);
#line 55 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var result = new Microsoft.Quantum.Arithmetic.LittleEndian(resultQubits);
#line 57 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Apply((dividend, xs));
#line 59 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, xs.Data));
#line 62 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((xs.Data, target));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, xs.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Adjoint.Apply((dividend, xs));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(dividendQubits);
#line hidden
                        Release__.Apply(resultQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (dividend,divisorRegister,target) = __in__;
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var __qsVar0__size__ = Microsoft__Quantum__Math__BitSizeI.Apply(dividend);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            {
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var (__qsVar1__dividendQubits__,__qsVar2__resultQubits__) = (Allocate__.Apply(__qsVar0__size__), Allocate__.Apply(__qsVar0__size__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var __qsVar3__xs__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__dividendQubits__);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var __qsVar4__ys__ = new Microsoft.Quantum.Arithmetic.LittleEndian(divisorRegister);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var __qsVar5__result__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar2__resultQubits__);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Apply((dividend, __qsVar3__xs__));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, __qsVar3__xs__.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((__qsVar3__xs__.Data, target));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, __qsVar3__xs__.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Adjoint.Apply((dividend, __qsVar3__xs__));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar1__dividendQubits__);
#line hidden
                        Release__.Apply(__qsVar2__resultQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(dividend,divisorRegister,target)) = __in__;
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var size = Microsoft__Quantum__Math__BitSizeI.Apply(dividend);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            {
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var (dividendQubits,resultQubits) = (Allocate__.Apply(size), Allocate__.Apply(size));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var xs = new Microsoft.Quantum.Arithmetic.LittleEndian(dividendQubits);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var ys = new Microsoft.Quantum.Arithmetic.LittleEndian(divisorRegister);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var result = new Microsoft.Quantum.Arithmetic.LittleEndian(resultQubits);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Apply((dividend, xs));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, xs.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (xs.Data, target)));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, xs.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Adjoint.Apply((dividend, xs));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(dividendQubits);
#line hidden
                        Release__.Apply(resultQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(dividend,divisorRegister,target)) = __in__;
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            var __qsVar0__size__ = Microsoft__Quantum__Math__BitSizeI.Apply(dividend);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            {
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var (__qsVar1__dividendQubits__,__qsVar2__resultQubits__) = (Allocate__.Apply(__qsVar0__size__), Allocate__.Apply(__qsVar0__size__));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var __qsVar3__xs__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__dividendQubits__);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var __qsVar4__ys__ = new Microsoft.Quantum.Arithmetic.LittleEndian(divisorRegister);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    var __qsVar5__result__ = new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar2__resultQubits__);
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Apply((dividend, __qsVar3__xs__));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, __qsVar3__xs__.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar3__xs__.Data, target)));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, __qsVar3__xs__.Data));
#line 46 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Adjoint.Apply((dividend, __qsVar3__xs__));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar1__dividendQubits__);
#line hidden
                        Release__.Apply(__qsVar2__resultQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__BitSizeI = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.BitSizeI));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__ApplyXorInPlace = this.__Factory__.Get<IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.ApplyXorInPlace));
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 dividend, IQArray<Qubit> divisorRegister, Qubit target)
        {
            return __m__.Run<MarkDivisor, (Int64,IQArray<Qubit>,Qubit), QVoid>((dividend, divisorRegister, target));
        }
    }

    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Body, 70, 83)]
    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Adjoint, 70, 83)]
    public partial class ApplyMarkingOracleAsPhaseOracle : Adjointable<(IAdjointable,IQArray<Qubit>)>, ICallable
    {
        public ApplyMarkingOracleAsPhaseOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyMarkingOracleAsPhaseOracle";
        String ICallable.FullName => "GroversTutorial.ApplyMarkingOracleAsPhaseOracle";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line hidden
            {
#line 74 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var target = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 76 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 77 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 79 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    markingOracle.Apply((register, target));
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            {
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                var __qsVar0__target__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(__qsVar0__target__);
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(__qsVar0__target__);
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    markingOracle.Adjoint.Apply((register, __qsVar0__target__));
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(__qsVar0__target__);
#line 70 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IAdjointable,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable markingOracle, IQArray<Qubit> register)
        {
            return __m__.Run<ApplyMarkingOracleAsPhaseOracle, (IAdjointable,IQArray<Qubit>), QVoid>((markingOracle, register));
        }
    }

    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Body, 83, 91)]
    public partial class RunGroversSearch : Operation<(IQArray<Qubit>,IAdjointable,Int64), QVoid>, ICallable
    {
        public RunGroversSearch(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "RunGroversSearch";
        String ICallable.FullName => "GroversTutorial.RunGroversSearch";
        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ReflectAboutUniform__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (register,phaseOracle,iterations) = __in__;
#line 84 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 85 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            foreach (var __arg1__ in new QRange(1L, iterations))
#line hidden
            {
#line 86 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                phaseOracle.Apply(register);
#line 87 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
                ReflectAboutUniform__.Apply(register);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.ReflectAboutUniform__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(ReflectAboutUniform));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable phaseOracle, Int64 iterations)
        {
            return __m__.Run<RunGroversSearch, (IQArray<Qubit>,IAdjointable,Int64), QVoid>((register, phaseOracle, iterations));
        }
    }

    [SourceLocation("C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs", OperationFunctor.Body, 91, -1)]
    public partial class ReflectAboutUniform : Operation<IQArray<Qubit>, QVoid>, ICallable
    {
        public ReflectAboutUniform(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ReflectAboutUniform";
        String ICallable.FullName => "GroversTutorial.ReflectAboutUniform";
        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Most
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Tail
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var inputQubits = __in__;
#line 93 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, inputQubits));
#line 94 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, inputQubits));
#line 96 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((Microsoft__Quantum__Arrays__Most.Apply<IQArray<Qubit>>(inputQubits), Microsoft__Quantum__Arrays__Tail.Apply<Qubit>(inputQubits)));
#line 91 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, inputQubits));
#line 91 "C:\\Users\\Doops\\Desktop\\CSE 310\\Portfolio\\Quantum\\GroverSearch\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, inputQubits));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Arrays__Most = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Most<>));
            this.Microsoft__Quantum__Arrays__Tail = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> inputQubits)
        {
            return __m__.Run<ReflectAboutUniform, IQArray<Qubit>, QVoid>(inputQubits);
        }
    }
}